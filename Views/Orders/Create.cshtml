@model OrderViewModel

@{
    ViewData["Title"] = "Add Order";
}

<div class="container-fluid">
    <h2>Add Order</h2>

    <form asp-action="Create" id="orderForm">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <!-- Order Header -->
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Order Information</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="OrderDate" class="control-label"></label>
                            <input asp-for="OrderDate" class="form-control" type="date" />
                            <span asp-validation-for="OrderDate" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Total Amount</label>
                            <div class="input-group">
                                <span class="input-group-text">₱</span>
                                <input asp-for="TotalAmount" class="form-control" readonly />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Lines -->
        <div class="card">
            <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Order Lines</h5>
                <button type="button" class="btn btn-primary btn-sm" onclick="addOrderLine()">
                    <i class="fas fa-plus"></i> Add Order Line
                </button>
            </div>
            <div class="card-body">
                <div id="orderLinesContainer">
                    <!-- Order lines will be added here dynamically -->
                </div>

                <div class="mt-3">
                    <strong>Total Amount: ₱<span id="totalAmount">0.00</span></strong>
                </div>
            </div>
        </div>

        <div class="mt-4">
            <button type="submit" class="btn btn-success">
                <i class="fas fa-save"></i> Submit Order
            </button>
            <a asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>
        </div>
    </form>
</div>

<!-- Hidden template for order line -->
<div id="orderLineTemplate" style="display: none;">
    <div class="order-line-item border rounded p-3 mb-3">
        <div class="row align-items-end">
            <div class="col-md-3">
                <label class="form-label">Product</label>
                <select class="form-select product-select" name="OrderLines[{index}].ProductId" onchange="updateProductInfo(this)">
                    <option value="">Select Product</option>
                    @foreach (var product in Model.AvailableProducts)
                    {
                        <option value="@product.Id" data-price="@product.UnitPrice" data-stock="@product.AvailableQuantity">
                            @product.Name - ₱@product.UnitPrice.ToString("F2") (Stock: @product.AvailableQuantity)
                        </option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Quantity</label>
                <input type="number" class="form-control quantity-input" name="OrderLines[{index}].Quantity"
                       min="1" onchange="calculateLineTotal(this)" />
            </div>
            <div class="col-md-2">
                <label class="form-label">Unit Price</label>
                <div class="input-group">
                    <span class="input-group-text">₱</span>
                    <input type="number" class="form-control unit-price" name="OrderLines[{index}].UnitPrice"
                           step="0.01" readonly />
                </div>
            </div>
            <div class="col-md-2">
                <label class="form-label">Line Total</label>
                <div class="input-group">
                    <span class="input-group-text">₱</span>
                    <input type="number" class="form-control line-total" name="OrderLines[{index}].LineTotal"
                           step="0.01" readonly />
                </div>
            </div>
            <div class="col-md-2">
                <label class="form-label">Available</label>
                <input type="number" class="form-control available-quantity" readonly />
            </div>
            <div class="col-md-1">
                <button type="button" class="btn btn-danger btn-sm w-100" onclick="removeOrderLine(this)">
                    Delete
                </button>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-12">
                <div class="stock-warning text-warning" style="display: none;">
                    <i class="fas fa-exclamation-triangle"></i> Insufficient stock available!
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        let orderLineIndex = 0;

        function addOrderLine() {
            const template = document.getElementById('orderLineTemplate').innerHTML;
            const newOrderLine = template.replace(/{index}/g, orderLineIndex);

            const container = document.getElementById('orderLinesContainer');
            const div = document.createElement('div');
            div.innerHTML = newOrderLine;
            container.appendChild(div.firstElementChild);

            orderLineIndex++;
        }

        function removeOrderLine(button) {
            button.closest('.order-line-item').remove();
            calculateTotalAmount();
        }

        function updateProductInfo(select) {
            const orderLineItem = select.closest('.order-line-item');
            const selectedOption = select.options[select.selectedIndex];

            if (selectedOption.value) {
                const price = parseFloat(selectedOption.dataset.price);
                const stock = parseInt(selectedOption.dataset.stock);

                orderLineItem.querySelector('.unit-price').value = price.toFixed(2);
                orderLineItem.querySelector('.available-quantity').value = stock;

                // Reset quantity and line total
                const quantityInput = orderLineItem.querySelector('.quantity-input');
                quantityInput.value = '';
                quantityInput.max = stock;
                orderLineItem.querySelector('.line-total').value = '0.00';

                // Hide stock warning
                orderLineItem.querySelector('.stock-warning').style.display = 'none';
            } else {
                orderLineItem.querySelector('.unit-price').value = '';
                orderLineItem.querySelector('.available-quantity').value = '';
                orderLineItem.querySelector('.line-total').value = '';
                orderLineItem.querySelector('.quantity-input').value = '';
            }

            calculateTotalAmount();
        }

        function calculateLineTotal(quantityInput) {
            const orderLineItem = quantityInput.closest('.order-line-item');
            const quantity = parseInt(quantityInput.value) || 0;
            const unitPrice = parseFloat(orderLineItem.querySelector('.unit-price').value) || 0;
            const availableQuantity = parseInt(orderLineItem.querySelector('.available-quantity').value) || 0;
            const stockWarning = orderLineItem.querySelector('.stock-warning');

            const lineTotal = quantity * unitPrice;
            orderLineItem.querySelector('.line-total').value = lineTotal.toFixed(2);

            // Check stock availability
            if (quantity > availableQuantity) {
                stockWarning.style.display = 'block';
                quantityInput.classList.add('is-invalid');
            } else {
                stockWarning.style.display = 'none';
                quantityInput.classList.remove('is-invalid');
            }

            calculateTotalAmount();
        }

        function calculateTotalAmount() {
            let total = 0;
            const lineTotals = document.querySelectorAll('.line-total');

            lineTotals.forEach(function(input) {
                const value = parseFloat(input.value) || 0;
                total += value;
            });

            document.getElementById('totalAmount').textContent = total.toFixed(2);
            document.querySelector('input[name="TotalAmount"]').value = total.toFixed(2);
        }

        // Form submission validation
        document.getElementById('orderForm').addEventListener('submit', function(e) {
            const orderLines = document.querySelectorAll('.order-line-item');

            if (orderLines.length === 0) {
                e.preventDefault();
                alert('Please add at least one order line.');
                return;
            }

            // Check for stock violations
            const stockViolations = document.querySelectorAll('.quantity-input.is-invalid');
            if (stockViolations.length > 0) {
                e.preventDefault();
                alert('Please fix stock availability issues before submitting.');
                return;
            }

            // Validate that all fields are filled
            let isValid = true;
            // orderLines.forEach(function(orderLine) {
            //     const productSelect = orderLine.querySelector('.product-select');
            //     const quantityInput = orderLine.querySelector('.quantity-input');

            //     if (!productSelect.value || !quantityInput.value || quantityInput.value <= 0) {
            //         isValid = false;
            //     }
            // });

            // if (!isValid) {
            //     e.preventDefault();
            //     alert('Please fill all order line fields correctly.');
            // }
        });

        // Add first order line on page load
        document.addEventListener('DOMContentLoaded', function() {
            addOrderLine();
        });
    </script>
}